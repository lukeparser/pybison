name: Build CI wheels

on:
  push:
    branches:
      - master

jobs:
  auto-tag:
    name: Add release tag
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.autotag.outputs.tagsha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Autoadd release Tags
        uses: jaliborc/action-general-autotag@1.0.1
        id: autotag
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source_file: "src/bison/__init__.py"
          # this is the semver regex https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
          # with an capture group (around everything), but all other groups are non capturing
          # double escape's where necessary
          extraction_regex: "__version__\\s*=\\s*[\\'\"]((?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)(?:-(?:(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+(?:[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)[\\'\"]"
          tag_message: "Release"
          tag_format: "v{version}"
      - name: Show version
        if: steps.autotag.outputs.tagsha
        run: echo ${{ steps.autotag.outputs.tagsha }}

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [auto-tag, build-wheels]
    if: ${{ needs.auto-tag.outputs.sha }}
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v2
        with:
          name: wheels
          path: ./dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}


  build-wheels:
    needs: [build_sdist]
    name: Build wheels on ${{ matrix.os }} (${{ matrix.cibw_archs }})
    runs-on: ${{ matrix.os }}
    env:
      CIBW_ARCHS_MACOS: "x86_64 arm64"
      CIBW_SKIP: "*_i686 *-win32 pp* *-musllinux_*"
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]
        cibw_archs: ["auto"]
        include:
          - os: ubuntu-20.04
            cibw_archs: "aarch64"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version:  3.x

      - name: Set up QEMU
        if: matrix.cibw_archs == 'aarch64'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Install cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.2.2

      - name: Build wheels for CPython 3.10 (manylinux_2_24)
        continue-on-error: true
        run: |
          python3 -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp310-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_24
          CIBW_BEFORE_ALL_LINUX: apt-get update && apt-get --yes --force-yes install libatlas-base-dev
          CIBW_BEFORE_BUILD: python3 -m pip install -U pip && python3 -m pip install -r requirements.txt
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

      - name: Build wheels for CPython 3.8 / 3.9 (manylinux_2_24)
        run: |
          python3 -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp38-* cp39-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_24
          CIBW_BEFORE_ALL_LINUX: apt-get update && apt-get --yes --force-yes install libatlas-base-dev
          CIBW_BEFORE_BUILD: python3 -m pip install -U pip && python3 -m pip install -r requirements.txt
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

      - name: Build wheels for CPython 3.7 / 3.8 / 3.9 (manylinux2014)
        run: |
          python3 -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp37-* cp38-* cp39-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_BEFORE_ALL_LINUX: yum install -y atlas-devel
          CIBW_BEFORE_BUILD: python3 -m pip install -U pip && python3 -m pip install -r requirements.txt
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: [auto-tag]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Build sdist
        run: python3 setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.tar.gz
